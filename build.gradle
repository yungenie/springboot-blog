buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.2'
	// QueryDSL 추가
	//id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // QueryDSL 플러그인 사용 X
}

group = 'com.yunjin'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // jpa 추가시 db 의존성도 추가해줘야함.
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-security' // 스프링 시큐리티를 사용하기 위한 스타터 추가
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6' // 타임리프에서 스프링 시큐리티를 사용하기 위한 의존성 추가
	implementation 'mysql:mysql-connector-java'
	implementation 'io.jsonwebtoken:jjwt:0.9.1' // 자바 JWT 라이브러리
	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	// QueryDSL 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    testImplementation 'org.projectlombok:lombok:1.18.28'// XML 문서와 JAVA 객체 간 매핑을 자동화
	runtimeOnly 'com.h2database:h2' // 인메모리 데이터베이스
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test' //자동추가
	testImplementation 'org.springframework.security:spring-security-test' // 스프링 시큐리티를 테스트하기 위한 의존성 추가
}

test {
	exclude '**/*'
}

tasks.named('test') {
	useJUnitPlatform()
}

/*tasks.withType(Test) {
	enabled = false
}*/


// QueryDSL 빌드 옵션 (선택)
def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
// Querydsl 설정부 시작 끝